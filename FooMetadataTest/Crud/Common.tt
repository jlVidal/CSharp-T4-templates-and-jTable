<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ include file="..\Common\Config.ttinclude" #>
<#@ output extension=".sql" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#+

	Table _table;
	public Table Table
	{
		get
		{
			if (_table == null)
			{
				Server server = new Server(new ServerConnection(new SqlConnection(this.ConnectionString)));
				SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(this.ConnectionString);
				Database database = new Database(server, string.IsNullOrEmpty(connectionStringBuilder.InitialCatalog) ? connectionStringBuilder.AttachDBFilename : connectionStringBuilder.InitialCatalog);

				if (String.IsNullOrWhiteSpace(SchemaName))
					_table = new Table(database, this.TableName);
				else
					_table = new Table(database, this.TableName, SchemaName);

				_table.Refresh();

			    if (_table.Columns == null || _table.Columns.Count <= 0)
			    {
					database.Refresh();
					if (database.Schemas.Count <= 0 && database.Tables.Count <= 0)
			        {
			            throw new InvalidOperationException("The current credentials didn't load the currently database information");
			        }

			        var searchBy = String.IsNullOrWhiteSpace(SchemaName) ? connectionStringBuilder.InitialCatalog : SchemaName;

					
			        var result =
			            database.Schemas.Cast<Schema>()
			                .FirstOrDefault(a => StringComparer.OrdinalIgnoreCase.Equals(a.Name, searchBy));

				   if (result == null)
					   result = database.Schemas.Cast<Schema>()
								.FirstOrDefault(a => StringComparer.OrdinalIgnoreCase.Equals(a.Name, "dbo"));

			        IEnumerable<Table> tableLooking;
			        if (result == null)
			            tableLooking = database.Tables.Cast<Table>().ToArray();
			        else
			            tableLooking = database.Tables.Cast<Table>().Where(a => a.Schema == searchBy).ToArray();

			        var tableFound =
			            tableLooking.FirstOrDefault(a => System.StringComparer.OrdinalIgnoreCase.Equals(a.Name, this.TableName));

			        return tableFound ?? _table;

			    }
			}
			return _table;
		}
	}


	/// <summary>
	/// Returns a string that contains T-SQL declaration for the specified data 
	/// type. For string data types this includes maximum length, for numeric 
	/// data types this includes scale and precision.
	/// </summary>
	string GetDataTypeDeclaration(DataType dataType)
	{
		string result = dataType.Name.ToUpper();
		switch(dataType.SqlDataType)
		{
			case SqlDataType.Binary:
			case SqlDataType.Char:
			case SqlDataType.NChar:
			case SqlDataType.NVarChar:
			case SqlDataType.VarBinary:
			case SqlDataType.VarChar:
				result += string.Format("({0})", dataType.MaximumLength);
				break;

			case SqlDataType.NVarCharMax:
			case SqlDataType.VarBinaryMax:
			case SqlDataType.VarCharMax:
				result += "(max)";
				break;

			case SqlDataType.Decimal:
			case SqlDataType.Numeric:
				result += string.Format("({0}, {1})", dataType.NumericPrecision, dataType.NumericScale);
				break;
		}
		return result;
	}

	/// <summary>
	/// Generates a select statement that assigns TIMESTAMP value generated by 
	/// SQL Server for the specified column. This is used to generate INSERT and
	/// UPDATE stored procedures.
	/// </summary>
	void WriteTimestampOutputParameter(Table table, Column timestampColumn)
	{
		string whereClause = string.Empty;
		foreach(Column column in table.Columns)
		{
			if (column.InPrimaryKey)
			{
				if (whereClause.Length > 0)
					whereClause += " and ";
				whereClause += string.Format("[{0}] = @{0}", column.Name);
			}
		}
#>

	-- Return <#= timestampColumn.Name #> value generated by SQL Server
	select @<#= timestampColumn.Name #> = [<#= timestampColumn.Name #>] from [<#= table.Name #>] where <#= whereClause #>
<#+
	}

	/// <summary>
	/// Generates where clause for UPDATE and DELETE statements for the specified
	/// table.
	/// </summary>
	void WriteWhereClause(Table table)
	{
		PushIndent("        ");
		int whereIndex = 0;
	    bool hasPrimaryKey = false;
		foreach(Column column in table.Columns)
		{
			if (column.InPrimaryKey || column.DataType.SqlDataType == SqlDataType.Timestamp)
			{
				if (whereIndex > 0)
					WriteLine(" AND");
				Write("[{0}] = @{0}", column.Name);
				whereIndex++;
			    hasPrimaryKey = true;
			}
		}

	    if (!hasPrimaryKey)
	    {
	        foreach(Column column in table.Columns)
			{
					if (whereIndex > 0)
						WriteLine(" AND");
					Write("[{0}] = @{0}", column.Name);
					whereIndex++;
			}
	    }

		PopIndent();
	}
#>