<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Dynamic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Dynamic" #><#@ import namespace="System.Net" #>	
<#@ import namespace="Microsoft.CSharp.RuntimeBinder" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".js" #>
<#
	var pathConn =
        @"";
    var tableName = "Foo";

    string jTableId = null;
    string title = null;
    string mainUrlPath = null;
    string listAction = null;
    string addAction = null;
    string removeAction = null;
    string updateAction = null;
    var useValidation = true;

    var sqlMetadataCommand = "SELECT TOP 0 * FROM " + tableName;
#>
<#
    var humanizedName = tableName;
    jTableId = jTableId ?? humanizedName + "Table";
    title = title ?? humanizedName + " List";
    mainUrlPath = mainUrlPath ?? "/" + humanizedName;

    listAction = listAction ?? mainUrlPath + "/ListAll";
    addAction = addAction ?? mainUrlPath + "/Create";
    removeAction = removeAction ?? mainUrlPath + "/Delete";
    updateAction = updateAction ?? mainUrlPath + "/Update";

    var data = GetSqlSchema(pathConn, sqlMetadataCommand);

    var sqlSchema = data.Rows.Cast<DataRow>().
        Select(
            a =>
                data.Columns.Cast<DataColumn>()
                    .Select(b => b.ColumnName)
                    .Select(b => new KeyValuePair<string, object>(b, a[b]))).
        Select(a => SimpleDbBasedMapper<ColumnSchema>.Map(a, new ColumnSchema())).
        ToArray();
#>
function JTableExtension(element) {
	var containerElement = element;
    var self = this;
    var dataDefinition;

	self.getDataFields = function()
	{
<#
    var fields = GetSchemaBasedFields(sqlSchema).ToArray();
    var mainObj = MergeFields(fields);
    var serialization = JsonConvert.SerializeObject(mainObj, Formatting.Indented);
#>
		return <#=serialization #>;
	}

	self.connect = function(element) {
		if (!(containerElement instanceof jQuery))
			containerElement = $(containerElement);

		 var fieldsConfig = self.getDataFields();

		 containerElement.jtable({
            tableId: '<#= jTableId #>',
            title: '<#= title #>',
            paging: true,
            sorting: true,
            //columnResizable: true, //Actually, no need to set true since it's default
            //columnSelectable: true, //Actually, no need to set true since it's default
            //saveUserPreferences: true, //Actually, no need to set true since it's default
            //defaultSorting: 'Name ASC',
            actions: {
                listAction: '<#=listAction #>',
                deleteAction: '<#=removeAction #>',
                updateAction: '<#= updateAction #>',
                createAction: '<#= addAction #>'
            },
			fields: fieldsConfig,
			<# if (useValidation) { #>
			formCreated: function (event, data) {
                data.form.validationEngine();
				$(data.form).addClass("custom_horizontal_form_field");

				var allKeys = Object.keys(fieldsConfig);
				for (var i = 0; i < allKeys.length; i++) {
					var field = allKeys[i];
					if (fieldsConfig[field].key)
					{
						var element = $(data.form).find("[name='" + field + "']");
						if (data.formType === 'edit')
						{
							element.attr('readonly','true')
						}
						else
						{
							element.attr('disabled','disabled')
						}
						
					}
				}
            },
            //Validate form when it is being submitted
            formSubmitting: function (event, data) {
                return data.form.validationEngine('validate');
            },
            //Dispose validation logic when form is closed
            formClosed: function (event, data) {
                data.form.validationEngine('hide');
                data.form.validationEngine('detach');
            }<#} #> 
		  });
 
        //Load stuff from server
        element.jtable('load');
	
	}
}
<#+

	private IEnumerable<dynamic> GetSchemaBasedFields(IEnumerable<ColumnSchema> schema)
	{
		foreach (var columnSchema in schema)
		{
			IDictionary<string,object> fieldNode = new ExpandoObject();

			dynamic propertiesNode = GetSchemaBasedFieldProperties(columnSchema);
			fieldNode[columnSchema.ColumnName] = propertiesNode;

			yield return fieldNode;
		}
	}

    private dynamic GetSchemaBasedFieldProperties(ColumnSchema columnSchema)
    {
        dynamic propertiesNode = new ExpandoObject();
		propertiesNode.title = ConvertFieldToTitle(columnSchema.ColumnName);
        propertiesNode.type = GetJTableType(columnSchema.DataType);

        if (columnSchema.IsReadOnly || columnSchema.IsIdentity || Convert.ToBoolean(columnSchema.IsKey))
        {
            propertiesNode.key = true;
            propertiesNode.edit = true;
            propertiesNode.create = true;
            return propertiesNode;
        }
        if (propertiesNode.type == "checkbox")
        {
			IDictionary<string,object> optionsBox = new ExpandoObject();
			optionsBox["false"] = "No";
            optionsBox["true"] = "Yes";
            propertiesNode.values = optionsBox;

            propertiesNode.defaultValue = "false";
        }

        string partialType = string.Empty;
		if (typeof (Int16?).IsAssignableFrom(columnSchema.DataType) ||
            typeof (Int32?).IsAssignableFrom(columnSchema.DataType) ||
            typeof (Int64?).IsAssignableFrom(columnSchema.DataType))
        {
            propertiesNode.inputClass = "custom[integer]";
        }
        else if (typeof (DateTime?).IsAssignableFrom(columnSchema.DataType))
        {
            propertiesNode.inputClass = "custom[date]";
        } else if (typeof(float?).IsAssignableFrom(columnSchema.DataType) ||
					typeof(double?).IsAssignableFrom(columnSchema.DataType) ||
					typeof(decimal?).IsAssignableFrom(columnSchema.DataType))
        {
			propertiesNode.inputClass = "custom[number]";   
        }

        if (string.IsNullOrWhiteSpace(partialType))
        {
			partialType = GetFallBackPartialInputClass(columnSchema);
        }

        if (columnSchema.AllowDBNull)
        {
            if (!string.IsNullOrWhiteSpace(partialType))
            {
				propertiesNode.inputClass = "validate[" + partialType + "]";    
            }
        }
        else
        {
            if (string.IsNullOrWhiteSpace(partialType))
            {
                propertiesNode.inputClass = "validate[required]";
            }
            else
            {
                propertiesNode.inputClass = "validate[required," + partialType + "]";
            }
            
        }
		return propertiesNode;
    }

    private string GetFallBackPartialInputClass(ColumnSchema schema)
    {
		if (schema.ColumnName.IndexOf("ID", StringComparison.OrdinalIgnoreCase) > -1)
        {
			return "custom[integer]"; 
        }

		if (schema.ColumnName.IndexOf("Amount", StringComparison.OrdinalIgnoreCase) > -1)
        {
			return "custom[number]"; 
        }

		if (schema.ColumnName.IndexOf("date", StringComparison.OrdinalIgnoreCase) > -1)
        {
			return "custom[date]"; 
        }
		return string.Empty;
    }


    private object GetJTableType(Type dataType)
    {
        if (typeof(bool?).IsAssignableFrom(dataType))
        {
            return "checkbox";
        }
        if (typeof (DateTime?).IsAssignableFrom(dataType))
        {
            return "date";
        }

        return "text";
    }

    private string ConvertFieldToTitle(string columnName)
    {
		var result = new StringBuilder();
        var canBeAcronym = false;
        for (int i = 0; i < columnName.Length; i++)
        {
            if (i == 0)
            {
                result.Append(char.ToUpper(columnName[i]));
                canBeAcronym = true;
                continue;
            }

            if (char.IsUpper(columnName[i]))
            {
                if (canBeAcronym)
                {
                    if (i + 1 < columnName.Length - 1 && char.IsLower(columnName[i + 1]))
                    {
						result.Append(" - ");
                    }

					result.Append(columnName[i]);
                }
                else
                {
                    result.Append(" ");
                    result.Append(columnName[i]);
                }
				canBeAcronym = true;
                continue;
            }

            canBeAcronym = false;
            result.Append(columnName[i]);

        }

        return result.ToString();
    }

    private dynamic MergeFields(IEnumerable<dynamic> fieldNodes)
	{
		IDictionary<string,object> mainNode = new ExpandoObject();

		foreach (dynamic fieldNode in fieldNodes)
		{
			var centralPoint = ((IDictionary<string, object>)fieldNode).First();

			if (centralPoint.Key == null)
				throw new NullReferenceException("centralPoint");

			mainNode[centralPoint.Key] = centralPoint.Value;
		}
		return mainNode;
	}
#>


<#+
    public class ColumnSchema
    {
        public string ColumnName { get; set; }
        public int ColumnOrdinal { get; set; }
        public int ColumnSize { get; set; }
        public int NumericPrecision { get; set; }
        public int NumericScale { get; set; }
        public string IsUnique { get; set; }
        public int IsKey { get; set; }
        public int BaseServerName { get; set; }
        public int BaseCatalogName { get; set; }
        public string BaseColumnName { get; set; }
        public int BaseSchemaName { get; set; }
        public int BaseTableName { get; set; }
        public Type DataType { get; set; }
        public bool AllowDBNull { get; set; }
        public int ProviderType { get; set; }
        public bool IsAliased { get; set; }
        public bool IsExpression { get; set; }
        public bool IsIdentity { get; set; }
        public string IsAutoIncrement { get; set; }
        public string IsRowVersion { get; set; }
        public bool IsHidden { get; set; }
        public bool? IsLong { get; set; }
        public bool IsReadOnly { get; set; }
        public Type ProviderSpecificDataType { get; set; }
        public string DataTypeName { get; set; }
        public int XmlSchemaCollectionDatabase { get; set; }
        public int XmlSchemaCollectionOwningSchema { get; set; }
        public int XmlSchemaCollectionName { get; set; }
        public int UdtAssemblyQualifiedName { get; set; }
        public int NonVersionedProviderType { get; set; }
        public string IsColumnSet { get; set; }
    }

	public static class SimpleDbBasedMapper<T>
        where T : class
    {
        private static readonly Dictionary<string, PropertyInfo> _propertyMap;

        static SimpleDbBasedMapper()
        {
            // At this point we can convert each
            // property name to lower case so we avoid 
            // creating a new string more than once.
            _propertyMap =
                typeof(T)
                .GetProperties()
                .ToDictionary(
                    p => p.Name.ToLower(),
                    p => p
                );
        }

        public static T Map(ExpandoObject source, T destination)
        {
            // Might as well take care of null references early.
            if (source == null)
                throw new ArgumentNullException("source");
            if (destination == null)
                throw new ArgumentNullException("destination");

            MapProcess(source, destination);

            return destination;
        }

        public static T Map(IEnumerable<KeyValuePair<string,object>> source, T destination)
        {
            // Might as well take care of null references early.
            if (source == null)
                throw new ArgumentNullException("source");
            if (destination == null)
                throw new ArgumentNullException("destination");

            MapProcess(source, destination);

            return destination;
        }

        private static void MapProcess(IEnumerable<KeyValuePair<string, object>> source, T destination)
        {
            // By iterating the KeyValuePair<string, object> of
            // source we can avoid manually searching the keys of
            // source as we see in your original code.
            foreach (var kv in source)
            {
                PropertyInfo p;
                if (_propertyMap.TryGetValue(kv.Key.ToLower(), out p))
                {
                    var propType = p.PropertyType;
                    if (kv.Value == null)
                    {
                        if (!propType.IsByRef && propType.Name != "Nullable`1")
                        {
                            // Throw if type is a value type 
                            // but not Nullable<>
                            throw new ArgumentException("not nullable");
                        }
                    }
                    else if (Convert.IsDBNull(kv.Value))
                    {
                        p.SetValue(destination, null, null);
                        continue;
                    }
                    else if (propType.IsInstanceOfType(kv.Value))
                    {
                        p.SetValue(destination, kv.Value, null);
                        continue;
                    }
                    if (kv.Value.GetType() != propType)
                    {
                        p.SetValue(destination, Convert.ChangeType(kv.Value, propType), null);
                        continue;
                    }
                    p.SetValue(destination, kv.Value, null);
                }
            }
        }
    }
#>

<#+
    public  DataTable GetSqlSchema(string pathConn, string command)
    {
        using (var conn = new SqlConnection(pathConn))
        {
            //FillData(pathConn, command);
            conn.Open();
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = command;
                cmd.CommandType = System.Data.CommandType.Text;

                using (var result = cmd.ExecuteReader(CommandBehavior.SchemaOnly))
                {
                    var schema = result.GetSchemaTable();
                    return schema;
                }
            }
        }
    }

  

#>